// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  authId         String          @unique
  registerNumber String          @unique
  name           String
  gender         Genders         @relation(fields: [genderName], references: [gender])
  genderName     String
  email          String          @unique
  phoneNumber    String          @unique
  department     Departments     @relation(fields: [departmentId], references: [id])
  departmentId   String
  labAdmin       Boolean         @default(false)
  labIncharge    Boolean         @default(false)
  lab            Lab?            @relation(fields: [labId], references: [id])
  labId          String?
  reservation    Reservation[]
  notifications  Notifications[]
  report         Report[]
  timeTable      TimeTable[]
  labTimeTable   LabTimeTable[]  @relation("admin")
  teachingAtLab  LabTimeTable[]
}

model Departments {
  id              String         @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  name            String         @unique
  numberOfBatches Int
  professors      User[]
  reservation     Reservation[]
  student         Student[]
  timeTable       TimeTable[]
  courses         Courses[]
  labTimeTable    LabTimeTable[]
}

model Student {
  id               String             @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  registerNumber   String             @unique
  name             String
  gender           Genders            @relation(fields: [genderName], references: [gender])
  genderName       String
  department       Departments        @relation(fields: [departmentsId], references: [id])
  departmentsId    String
  semester         Int
  batch            String             @default("A")
  labBatch         Int                @default(1)
  studentPositions StudentPositions[]
  absentStudents   AbsentStudents[]
}

model Lab {
  id               String             @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  labName          String             @unique
  capacity         Int
  roomNumber       String
  venue            String
  labAdmins        User[]
  report           Report[]
  timeTable        TimeTable[]
  attendanceRecord AttendanceRecord[]
  reservation      Reservation[]
}

model Reservation {
  id                    String            @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  professor             User              @relation(fields: [professorId], references: [registerNumber])
  professorId           String
  date                  DateTime          @default(now()) @db.Date
  day                   Days              @relation(fields: [dayId], references: [day])
  dayId                 String
  negotiable            Boolean
  purpose               String?
  course                Courses           @relation(fields: [coursesId], references: [courseCode])
  coursesId             String
  semester              Int
  period                Int
  teachingDepartment    Departments       @relation(fields: [teachingDepartmentsId], references: [name])
  teachingDepartmentsId String
  lab                   Lab               @relation(fields: [labId], references: [labName])
  labId                 String
  batch                 String
  status                ReservationStatus @default(REQUESTED)

  @@unique([date, labId, period])
}

model TimeTable {
  id                   String      @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  user                 User        @relation(fields: [userId], references: [registerNumber])
  userId               String
  course               Courses?    @relation(fields: [coursesId], references: [courseCode])
  coursesId            String?
  semester             Int
  batch                String
  periodNumber         Int
  day                  Days        @relation(fields: [dayId], references: [day])
  dayId                String
  teachingDepartment   Departments @relation(fields: [teachingDepartmentId], references: [id])
  teachingDepartmentId String
  lab                  Lab?        @relation(fields: [labId], references: [labName])
  labId                String?

  @@unique([userId, teachingDepartmentId, periodNumber])
}

model LabTimeTable {
  id            String      @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  user          User        @relation("admin", fields: [userId], references: [registerNumber])
  userId        String
  course        Courses?    @relation(fields: [courseCode], references: [courseCode])
  courseCode    String?
  department    Departments @relation(fields: [departmentId], references: [id])
  departmentId  String
  semester      Int
  batch         String
  periodNumber  Int
  day           Days        @relation(fields: [dayId], references: [day])
  dayId         String
  teachingStaff User[]
}

model AttendanceRecord {
  id               String             @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  date             DateTime           @db.Date
  lab              Lab                @relation(fields: [labName], references: [labName])
  labName          String
  periods          Int[]
  studentPositions StudentPositions[]
  course           Courses            @relation(fields: [courseCode], references: [courseCode])
  courseCode       String
  experiments      Experiments[]
  absentStudents   AbsentStudents[]

  @@unique([date, labName, periods])
}

model StudentPositions {
  id                 String           @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  student            Student          @relation(fields: [studentId], references: [registerNumber])
  studentId          String
  systemNumber       Int
  attendanceRecord   AttendanceRecord @relation(fields: [attendanceRecordId], references: [id])
  attendanceRecordId String

  @@unique([studentId, systemNumber])
}

model AbsentStudents {
  id                 String           @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  student            Student          @relation(fields: [studentId], references: [registerNumber])
  studentId          String
  attendanceRecord   AttendanceRecord @relation(fields: [attendanceRecordId], references: [id])
  attendanceRecordId String
}

model Experiments {
  id               String             @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  experimentNumber Int
  experimentName   String
  course           Courses            @relation(fields: [courseCode], references: [courseCode])
  courseCode       String
  attendanceRecord AttendanceRecord[]

  @@unique([experimentNumber, experimentName])
}

model Courses {
  courseCode       String             @id @unique
  courseName       String
  isPractical      Boolean            @default(false)
  department       Departments[]
  reservation      Reservation[]
  timeTable        TimeTable[]
  experiments      Experiments[]
  labTimeTable     LabTimeTable[]
  attendanceRecord AttendanceRecord[]
}

model Notifications {
  id                    String           @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  professor             User             @relation(fields: [professorsProfessorId], references: [registerNumber])
  professorsProfessorId String
  heading               String
  message               String?
  type                  NotificationType
  seen                  Boolean          @default(false)
  timeStamp             DateTime         @default(now())
}

model Report {
  id               String       @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  lab              Lab          @relation(fields: [labId], references: [labName])
  labId            String
  professor        User         @relation(fields: [professorId], references: [registerNumber])
  professorId      String
  systems          Int[]
  date             DateTime     @default(now())
  issueDescription String
  status           ReportStatus @default(PENDING)
}

model Days {
  day          String         @id @unique
  reservation  Reservation[]
  timeTable    TimeTable[]
  labTimeTable LabTimeTable[]
}

model Genders {
  gender  String    @id @unique
  user    User[]
  student Student[]
}

enum NotificationType {
  RESERVATION_APPROVED
  RESERVATION_REJECTED
  RESERVATION_REQUEST
  REPORT
}

enum ReportStatus {
  PENDING
  SOLVED
}

enum ReservationStatus {
  APPROVED
  REQUESTED
  REJECTED
}
