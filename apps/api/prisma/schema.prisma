// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  authId         String          @unique
  registerNumber String
  name           String
  gender         Gender
  email          String          @unique
  phoneNumber    String          @unique
  department     Departments     @relation("EachProfessor", fields: [departmentId], references: [id])
  departmentId   String
  reservation    Reservation[]
  notifications  Notifications[]
  report         Report[]
  role           Roles
  labIncharge    Boolean         @default(false)
  timeTable      TimeTable[]
  lab            Lab?            @relation(fields: [labId], references: [id])
  labId          String?
}

model Departments {
  id          String        @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  name        String        @unique
  professors  User[]        @relation("EachProfessor")
  reservation Reservation[]
  batches     Int
  student     Student[]
  timeTable   TimeTable[]
  courses     Courses[]
}

model Student {
  id                 String             @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  registerNumber     String             @unique
  name               String
  department         Departments        @relation(fields: [departmentsId], references: [id])
  departmentsId      String
  semester           Semester
  batch              Batch
  labBatch           LabBatch
  attendanceRecord   AttendanceRecord?  @relation(fields: [attendanceRecordId], references: [id])
  attendanceRecordId String?
  studentPositions   StudentPositions[]
}

model Lab {
  id               String             @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  labName          String             @unique
  labAdmins        User[]
  capacity         Int
  roomNumber       String
  venue            String?
  report           Report[]
  timeTable        TimeTable[]
  attendanceRecord AttendanceRecord[]
  reservation      Reservation[]
}

model Reservation {
  id                    String            @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  professor             User              @relation(fields: [professorId], references: [id])
  professorId           String
  date                  DateTime          @db.Date
  day                   Days
  negotiable            Boolean
  purpose               String?
  course                Courses           @relation(fields: [coursesId], references: [courseCode])
  coursesId             String
  semester              Semester
  period                PeriodNumber
  teachingDepartment    Departments       @relation(fields: [teachingDepartmentsId], references: [id])
  teachingDepartmentsId String
  lab                   Lab               @relation(fields: [labId], references: [id])
  labId                 String
  batch                 Batch
  status                ReservationStatus

  @@unique([date, day, labId, period])
}

model TimeTable {
  id                   String       @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  course               Courses      @relation(fields: [coursesId], references: [courseCode])
  coursesId            String
  batch                Batch
  user                 User         @relation(fields: [userId], references: [id])
  userId               String
  teachingDepartment   Departments  @relation(fields: [teachingDepartmentId], references: [id])
  teachingDepartmentId String
  periodNumber         PeriodNumber
  day                  Days
  lab                  Lab?         @relation(fields: [labId], references: [id])
  labId                String?

  @@unique([userId, teachingDepartmentId, periodNumber, day])
}

model AttendanceRecord {
  id               String             @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  date             DateTime           @db.Date
  lab              Lab                @relation(fields: [labName], references: [labName])
  labName          String
  periods          PeriodNumber[]
  absentStudents   Student[]
  studentPositions StudentPositions[]
  expreiments      Experiments[]

  @@unique([date, labName, periods])
}

model StudentPositions {
  id                 String           @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  student            Student          @relation(fields: [studentId], references: [id])
  studentId          String
  systemNumber       Int
  attendanceRecord   AttendanceRecord @relation(fields: [attendanceRecordId], references: [id])
  attendanceRecordId String

  @@unique([studentId, systemNumber])
}

model Experiments {
  id                String             @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  experimentNumber  Int
  experimentName    String
  course            Courses            @relation(fields: [coursesCourseCode], references: [courseCode])
  coursesCourseCode String
  attendanceRecord  AttendanceRecord[]

  @@unique([experimentNumber, experimentName])
}

model Courses {
  courseCode  String        @id @unique
  courseName  String
  semester    Semester
  department  Departments[]
  reservation Reservation[]
  timeTable   TimeTable[]
  type        CourseType
  experiments Experiments[]
}

model Notifications {
  id                    String           @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  professor             User             @relation(fields: [professorsProfessorId], references: [id])
  professorsProfessorId String
  heading               String
  message               String?
  type                  NotificationType
  seen                  Boolean          @default(false)
  timeStamp             DateTime         @default(now())
}

model Report {
  id               String       @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  lab              Lab          @relation(fields: [labId], references: [id])
  labId            String
  professor        User         @relation(fields: [professorId], references: [id])
  professorId      String
  systems          Int[]
  date             DateTime     @default(now())
  issueType        String
  issueDescription String?
  status           ReportStatus
}

enum Roles {
  TEACHER
  ADMINISTRATOR
}

enum Batch {
  A
  B
}

enum LabBatch {
  BATCH1
  BATCH2
}

enum Semester {
  S1
  S2
  S3
  S4
  S5
  S6
  S7
  S8
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum PeriodNumber {
  PERIOD1
  PERIOD2
  PERIOD3
  PERIOD4
  PERIOD5
  PERIOD6
  PERIOD7
}

enum NotificationType {
  RESERVATION_APPROVED
  RESERVATION_REJECTED
  REPORT
}

enum CourseType {
  THEORY
  PRACTICAL
}

enum ReportStatus {
  PENDING
  SOLVED
}

enum ReservationStatus {
  APPROVED
  REQUESTED
}

enum Gender {
  MALE
  FEMALE
}
