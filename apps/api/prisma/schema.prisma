// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  authId         String        @unique
  registerNumber String
  name           String
  email          String        @unique
  phoneNumber    String        @unique
  department     Departments   @relation("EachProfessor", fields: [departmentId], references: [id])
  departmentId   String
  reservation    Reservation[]
  // notifications  Notifications[]
  report         Report[]
  role           Roles
  // Departments    Departments?    @relation("DepartmentHead")
}

model Departments {
  id          String        @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  name        String
  professors  User[]        @relation("EachProfessor")
  Reservation Reservation[]
  batches     Int
  Student     Student[]
  TimeTable   TimeTable[]
  Courses     Courses[]
}

model Student {
  id             String      @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  registerNumber String      @unique
  name           String
  department     Departments @relation(fields: [departmentsId], references: [id])
  departmentsId  String
  semester       Semester
  batch          Batch
  labBatch       LabBatch
}

model Labs {
  id         String   @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  labName    String
  capacity   Int
  roomNumber String
  // usageStatistics UsageStatistics?
  report     Report[]
}

model Reservation {
  id            String      @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  professor     User        @relation(fields: [professorId], references: [id])
  professorId   String
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  negotiable    Boolean
  purpose       String?
  // course      Courses  @relation(fields: [coursesId], references: [id])
  // coursesId   String
  semester      Semester
  department    Departments @relation(fields: [departmentsId], references: [id])
  departmentsId String
  batch         String?
}

// model UsageStatistics {
//   lab              Labs   @relation(fields: [id], references: [id])
//   id               String @id @unique
//   reservationCount Int
//   averageUsageTime Int?
//   peakUsagePeriod  Int?
// }

model TimeTable {
  id            String      @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  department    Departments @relation(fields: [departmentsId], references: [id])
  departmentsId String
  semester      Semester
  batch         Batch
  dayOfTheWeek  Days
  courses1      Courses     @relation("Period1", fields: [course1Id], references: [id])
  course1Id     String
  course2       Courses     @relation("Period2", fields: [course2Id], references: [id])
  course2Id     String
  course3       Courses     @relation("Period3", fields: [course3Id], references: [id])
  course3Id     String
  course4       Courses     @relation("Period4", fields: [course4Id], references: [id])
  course4Id     String
  course5       Courses     @relation("Period5", fields: [course5Id], references: [id])
  course5Id     String
  course6       Courses     @relation("Period6", fields: [course6Id], references: [id])
  course6Id     String
  course7       Courses     @relation("Period7", fields: [course7Id], references: [id])
  course7Id     String

  @@unique([departmentsId, semester, batch, dayOfTheWeek])
}

// model TimeTable {
//   department    Departments @relation(fields: [departmentsId], references: [id])
//   departmentsId String
//   semester      Semester
//   batch         Batch
//   // periods       Periods[] @relation(fields: [departmentsId, semester, batch], references: [departmentsId, semester, batch])
//   // periodsId     String[]

//   @@id([departmentsId, semester, batch])
// }

model Courses {
  id         String        @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  courseCode String
  courseName String
  department Departments[]
  // reservation Reservation[]
  Periods1   TimeTable[]   @relation("Period1")
  Periods2   TimeTable[]   @relation("Period2")
  Periods3   TimeTable[]   @relation("Period3")
  Periods4   TimeTable[]   @relation("Period4")
  Periods5   TimeTable[]   @relation("Period5")
  Periods6   TimeTable[]   @relation("Period6")
  Periods7   TimeTable[]   @relation("Period7")
}

// model Notifications {
//   id                    String   @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
//   professor             User     @relation(fields: [professorsProfessorId], references: [id])
//   professorsProfessorId String
//   message               String?
//   timeStamp             DateTime
// }

model Report {
  id                    String   @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  lab                   Labs     @relation(fields: [labsLabId], references: [id])
  labsLabId             String
  professor             User     @relation(fields: [professorsProfessorId], references: [id])
  professorsProfessorId String
  date                  DateTime
  issue_type            String
  issue_description     String?
  status                String
}

enum Roles {
  TEACHER
  ADMINISTRATOR
  LAB_INCHARGE
  HOD
}

enum Batch {
  A
  B
}

enum LabBatch {
  Batch1
  Batch2
}

enum Semester {
  S1
  S2
  S3
  S4
  S5
  S6
  S7
  S8
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
